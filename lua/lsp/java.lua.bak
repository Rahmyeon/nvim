-- local utl = require 'util.utl'
local on_attach = require("util.lsp").on_attach
-- local lspconfig = require("lspconfig")

--java
local function fix_zero_version(workspace_edit)
  if workspace_edit and workspace_edit.documentChanges then
    for _, change in pairs(workspace_edit.documentChanges) do
      local text_document = change.textDocument
      if text_document and text_document.version and text_document.version == 0 then
        text_document.version = nil
      end
    end
  end
  return workspace_edit
end

local function on_textdocument_codeaction(err, actions, ctx)
  for _, action in ipairs(actions) do
    -- TODO: (steelsojka) Handle more than one edit?
    if action.command == 'java.apply.workspaceEdit' then -- 'action' is Command in java format
      action.edit = fix_zero_version(action.edit or action.arguments[1])
    elseif type(action.command) == 'table' and action.command.command == 'java.apply.workspaceEdit' then -- 'action' is CodeAction in java format
      action.edit = fix_zero_version(action.edit or action.command.arguments[1])
    end
  end

  vim.lsp.handlers[ctx.method](err, actions, ctx)
end

local function on_textdocument_rename(err, workspace_edit, ctx)
  vim.lsp.handlers[ctx.method](err, fix_zero_version(workspace_edit), ctx)
end

local function on_workspace_applyedit(err, workspace_edit, ctx)
  vim.lsp.handlers[ctx.method](err, fix_zero_version(workspace_edit), ctx)
end

-- Non-standard notification that can be used to display progress
local function on_language_status(_, result)
  local command = vim.api.nvim_command
  command 'echohl ModeMsg'
  command(string.format('echo "%s"', result.message))
  command 'echohl None'
end



vim.lsp.config.jdtls = ({
  -- capabilities = capabilities,
  on_attach = on_attach,
  -- cmd = {"jdtls", "-configuration", vim.fn.expand("$HOME") .. "/.cache/jdtls/config", "-data", vim.fn.expand("$HOME") .. "/.cache/jdtls/workspace" },{ "jdtls", "-configuration", "/home/runner/.cache/jdtls/config", "-data", "/home/runner/.cache/jdtls/workspace" }
  -- cmd = {"jdtls", "-configuration", "~/.cache/jdtls/config", "-data", "~/.cache/jdtls/workspace" },
  cmd = { "jdtls", "-configuration", "~/.cache/jdtls/config", "-data", "~/.cache/jdtls/workspace" },
  -- cmd = {vim.fn.exepath("jdtls"), "-configuration", vim.fn.expand("$HOME") .. "/.cache/jdtls/config", "-data", vim.fn.expand("$HOME") .. "/.cache/jdtls/workspace" },
  -- cmd = { 'jdtls' },
  -- vim.fn.stdpath('data') .. "/mason/bin/jdtls.cmd"
  filetypes = { 'java' },
  -- root_dir = function(fname)
  --   local root_files = {
  --     -- Multi-module projects
  --     { '.git', 'build.gradle', 'build.gradle.kts' },
  --     -- Single-module projects
  --     {
  --       'build.xml', -- Ant
  --       'pom.xml', -- Maven
  --       'settings.gradle', -- Gradle
  --       'settings.gradle.kts', -- Gradle
  --     },
  --   }
  --   for _, patterns in ipairs(root_files) do
  --     local root = utl.root_pattern(unpack(patterns))(fname)
  --     if root then
  --       return root
  --     end
  --   end
  -- end,
  single_file_support = true,
  -- root_dir = vim.fs.dirname(vim.fs.find({ 'gradlew', '.git', 'pom.xml' })[1]),
  -- root_markers = { 'gradlew', '.git', 'pom.xml'  },
  root_markers = { ".git", "build.gradle", "build.gradle.kts", "build.xml", "pom.xml", "settings.gradle", "settings.gradle.kts" },
  -- root_dir = vim.fs.dirname(vim.fs.find({ 'gradlew', '.git', 'pom.xml' })[1]),
  handlers = {
    ['textDocument/codeAction'] = on_textdocument_codeaction,
    ['textDocument/rename'] = on_textdocument_rename,
    ['workspace/applyEdit'] = on_workspace_applyedit,
    ['language/status'] = vim.schedule_wrap(on_language_status),
    ["$/progress"] = function(_, result, ctx) end,
  },
  settings = {
    java = {
      -- Enable code formatting
        format = {
          enabled = true,
          -- Use the Google Style guide for code formattingh
          settings = {
            url = vim.fn.stdpath("config") .. "/lang_servers/intellij-java-google-style.xml",
              profile = "GoogleStyle"
          }
        },
        -- Enable downloading archives from eclipse automatically
        eclipse = {
          downloadSource = true
        },
        -- Enable downloading archives from maven automatically
        maven = {
          downloadSources = true
        },
        -- Enable method signature help
        signatureHelp = {
          enabled = true
        },
        -- Use the fernflower decompiler when using the javap command to decompile byte code back to java code
        contentProvider = {
          preferred = "fernflower"
        },
        -- Setup automatical package import oranization on file save
        saveActions = {
          organizeImports = true
        },
        -- Customize completion options
        completion = {
          -- Set the order in which the language server should organize imports
          importOrder = {
            "java",
            "jakarta",
            "javax",
            "com",
            "org",
          }
        },
        sources = {
          -- How many classes from a specific package should be imported before automatic imports combine them all into a single import
          organizeImports = {
            starThreshold = 9999,
            staticThreshold = 9999
          }
        },
        -- How should different pieces of code be generated?
        codeGeneration = {
          -- When generating toString use a json format
          toString = {
              template = "${object.className}{${member.name()}=${member.value}, ${otherMembers}}"
          },
          -- When generating hashCode and equals methods use the java 7 objects method
          hashCodeEquals = {
              useJava7Objects = true
          },
          -- When generating code use code blocks
          useBlocks = true
        },
         -- If changes to the project will require the developer to update the projects configuration advise the developer before accepting the change
        configuration = {
            updateBuildConfiguration = "interactive"
        },
        -- enable code lens in the lsp
        referencesCodeLens = {
            enabled = true
        },
        -- enable inlay hints for parameter names,
        inlayHints = {
          parameterNames = {
            enabled = "all"
        }
      }
    }
  }
})


vim.lsp.enable({'jdtls'})
